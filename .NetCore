Concurrency vs parllelsim

Concurrency - excecuting multiple task on the same core using overlapping or timeslicing or context switch.
              Goal - making program usable.

1. async / await – For non-blocking I/O operations.
2. Task / Task<T> – Run operations asynchronously.
3. Task.WhenAll() – Run multiple tasks concurrently.
4. IHostedService / BackgroundService – For background concurrent execution.
5. System.Threading.Channels – For building producer-consumer pipelines.
6. Thread-safe Collections – Use ConcurrentDictionary, BlockingCollection, etc.

Parallelism - excecuting multiple task in different core
              Goal - prformance

1.Parallel.For – Loop with parallel execution.
2.Parallel.ForEach – Process collections in parallel.
3.Parallel.Invoke – Run multiple actions in parallel.
4.Task.Run + Task.WhenAll – Run multiple tasks in parallel.
5.Thread Class – Manually create threads (low-level, less common now).
-----------------------------------------------------------------------
DI - Dependency Injection
Problems If We Don’t Use

1. Tight Coupling - Classes are directly responsible for creating their own dependencies, making them hard to replace or modify.
2. Difficult Testing - You can’t easily inject mocks or fakes, making unit testing complex.
3. Harder Maintenance - Any change in dependency logic may require changing all the classes that use it.
4. Code Duplication - Manually creating instances of services in multiple places.
5. Violation of SOLID Principles - Especially Dependency Inversion and Single Responsibility.
6. Complex Object Graphs - Managing complex dependencies manually can become error-prone and hard to track.

Why We Use Dependency Injection in .NET

1. Loose Coupling - DI decouples classes from their dependencies. You depend on interfaces, not concrete implementations.
2. Improved Testability - Makes unit testing easier by injecting mock/fake dependencies. No need to hardcode dependencies inside the class.
3. Better Maintainability - Changes to dependencies require fewer changes in dependent classes.
5. Code Reusability - You can reuse and switch out implementations easily. 
6. Centralized Configuration - Dependencies are registered in one place.  (e.g., Startup.cs), improving visibility.
7. Follows SOLID Principles - Especially the Dependency Inversion Principle (D).
8. Lifecycle Management - DI containers handle the lifecycle (Singleton, Scoped, Transient) of services.

----------------------------------------------------------------------
Does Asynchronous code use Threads at the background? - NO

Asynchorous
about - 1. Making Application usbale.
        2. Non-blocking main thread.

Not about 1. Improving performance
          2. creating new thread
----------------------------------------------------------------
TPL autometically uses multiple core
Threading uses timeslicing and context switching
Async - concurrent - usable

Asynchronous code enables concurrency, especially for I/O-bound work.
Concurrency can be achieved using async, tasks, or threads.

Async is about how tasks are executed (non-blocking),
Concurrency is about how many tasks are in progress at the same time.

1. Parallel and time slicing / context switch are 2 diff thing
2. TPL it implements automatic parallel.
3. Threading CPU affinity.
4. Parallel and Async are different.
5. Synchronization context :- thread which connected the call back and the main thread.
-----------------------------------------------------------------------------------
Routing - defined in startup.cs or program.cs
1. Conventional Routing

app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}");
});

2. Attribute Routing
[Route("api/products")]

3. Endpoint Routing (Introduced in ASP.NET Core 3.0)
4.  Area Routing
-------------------------------------------------------
In-Process Hosting:
1. Runs inside IIS (w3wp.exe).
2. Faster and lower latency since no inter-process communication.
3. Windows only, not cross-platform.

Out-of-Process Hosting:
1. Runs outside IIS in its own process (dotnet.exe).
2. Cross-platform (Windows, Linux, macOS) but slightly slower due to communication with IIS.
3. IIS acts as a reverse proxy to forward requests to Kestrel.
-----------------------------------------------------------
What app.Run() Actually Does:
1. app.Run() is a terminal middleware in the ASP.NET Core middleware pipeline.
2. Its job is to handle the final processing of an HTTP request.
3. It sends a response and ends the pipeline—no other middleware executes after it.

 app.Use()
1. Adds middleware to the request pipeline.
2. Can modify the request or response and call the next middleware using next().
3. Executes before and after the next middleware.

app.Map()
1. Divides the pipeline based on a URL path segment.
2. Creates a branch in the middleware pipeline for specific routes.
-------------------------------------------------------------------
Request Delegate
Request delegate are used to build the request pipeline.
Request delegate are configured using Run,Map and Use extension methods
---------------------------------------------------------------------
Middleware - A middleware a compoenent that is executed on every request in the ASP.Net core application.
Middleware is a software component that is executed during the request-response pipeline in an ASP.NET Core application. It is responsible for handling HTTP requests, modifying them, processing logic, 
and passing control to the next middleware in the sequence, or directly generating a response.
In simpler terms, middleware:
Intercepts HTTP requests as they travel through the pipeline.
Can modify the request, execute logic, or generate a response.
Passes the request to the next middleware in the pipeline if it does not end the request.



























