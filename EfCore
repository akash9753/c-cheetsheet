DbContext - for interacting with database, all the logic that is needed for entitiy framwork core like access a database, retrive, update 
            delete create table, all this logic provide by DbContext class

DbSet - classes we want in our application and create it in the database

in class BookID or Id or [Key]

Command :-
update-database
add-migration decimal
Remove-Migration
get-migration
drop-database

Rollback to old migration
update-database AddBookToDb

Data Annotation :-
[Table("tb_geners")]
[Column("Name")]
[Key]
[Required]

Relation in efcore
1.one to one - onDelete: ReferentialAction.Cascade); (if book deleted then bookdetails also be deleted)
2.one to many - 1 publisher have many book. but 1 book has only one publisher
3.many to many - Book and Authors



First - always expect atleat one element else return exception
FirstOrDefault - if no records are found it return null. if found multiple element return first one

Find - only filter directly for key

Single - single expects only one element. if found multiple element return throws an exception
SingleOrDefault - it will return null if no records are found, Throws Exception if more than one element matches.

Pagination - Skip(0), Take(2);
------------------------------------------------------------
Concurrency in EF Core (2 Main Ways) - when multiple users or processes can update the same data at the same time, and data integrity must be preserved.

1. Optimistic Concurrency (default & recommended)
    a. Use [Timestamp] or .IsConcurrencyToken() on a property.
    b. EF throws DbUpdateConcurrencyException when a conflict is detected.
    c.Requires handling conflict manually in code.

    [Timestamp]
    public byte[] RowVersion { get; set; } 

2. Pessimistic Concurrency (manual)
   a. Use database-level row locking with raw SQL and WITH (UPDLOCK).
   b. Requires transactions.
   var employee = context.Employees
    .FromSqlRaw("SELECT * FROM Employees WITH (UPDLOCK) WHERE Id = 1")
    .FirstOrDefault();
-------------------------------------------------------
Parallelism in EF Core (1 Safe Way + 1 Unsafe)

1. Safe: Parallel DB Queries in Separate DbContext Instances
   a. EF Core's DbContext is not thread-safe.
   b. Use separate instances of DbContext for parallel operations.
   var task1 = Task.Run(() => UseDbContext1());
   var task2 = Task.Run(() => UseDbContext2());
   await Task.WhenAll(task1, task2);

2. Unsafe: Sharing the Same DbContext Across Threads (❌ Not Recommended)
   a. Leads to data corruption, exceptions, or deadlocks.
   b. Always avoid multi-threading on the same DbContext.
------------------------------------------------------------------
DbContext - provides bridge a bridge between code and the database. it manages entity ststes and tracks changes automatically.

use data annotaion or fluent api to define relationship like one-to-many, many-to-many, and one to one

migration manges schema changes over time, providing a way to update the databse schema in controlled way

1. Eager loading - fetches related data with main the query

var students = context.Students
                      .Include(s => s.Courses)
                      .ToList();

2. lazy loading - fetches data when accessed
var student = context.Students.First(); // Only loads Student
var courses = student.Courses.ToList(); // Loads Courses when accessed

3. expilicit loading - requires manually loading
var student = context.Students.First(); // Only Student loaded

// Explicitly load related data
context.Entry(student)
       .Collection(s => s.Courses)
       .Load();
---------------------------------------------------------
run raw SQL queries
customers = context.Customers
    .FromSqlRaw("SELECT * FROM Customers WHERE City = {0}", "New York")
    .ToList();
-------------------------------------------------------
Tracking is useful for updates, but for readonly operations, disabling tracking reduces overhead and inproves performance.
AsNoTracking()
-------------------------------------------------------
Concurrency tokens help prevent data loss in scenario with multiple users updating the same data.
[ConcurrencyCheck]
public string Email { get; set; }
------------------------------------------------------
use multiple DbContext for modularity, seprating read and write operations. - in a large muduler application
-------------------------------------------------
Soft Delete - Add an IsDeleted flag and use a global query filter to exclude soft-deleted entires.
-------------------------------------------------
optimize EFcore quries for performance in high-traffic application?
1. Use AsNoTracking() for readonly data
2. filter as early as possible 
3. avoid N+1 queries by eager loading where necessary
------------------------------------------------
transanction
Use TransactionScope for distributed transactions or IDbContextTransaction for local transactions.
using (var transaction = context.Database.BeginTransaction())
{
    // Perform actions here
    transaction.Commit();
}
----------------------------------------------------
tracking states in efcore
1. Added
2. Modified
3. Deleted
4. Unchanged
-----------------------------------------------------
audit log for all CRUD operations in EF Core
USe SaveChanges interceptors, or overriding SaveChanges in DbContext.
public override int SaveChanges()
{
    // Log changes here
    return base.SaveChanges();
}
---------------------------------------------------
Question:
In what scenarios would you use raw SQL queries in EF Core, and what are the potential trade-offs?

Expected Answer:
Use for complex queries; potential trade-offs include SQL injection risk if not parameterized.

Explanation:
Raw SQL allows flexibility in EF Core but can bypass EF Core’s optimizations and safety mechanisms.
----------------------------------------------
Question:
How do you handle large datasets in EF Core without causing performance bottlenecks?
Expected Answer:
Implement pagination with .Skip() and .Take(), batch queries, and avoid fetching unnecessary columns.
Code Example:
var pagedResults = context.Products.Skip(50).Take(10).ToList();
------------------------------------------------
Question:
How would you implement connection resiliency and retry policies in EF Core?
Expected Answer:
Enable retry policies with SQL Server’s EnableRetryOnFailure() to automatically handle transient errors.
Code Example:
optionsBuilder.UseSqlServer(connectionString, options =>
    options.EnableRetryOnFailure());
------------------------------------------------
Sensitive data logging in EF Core is useful for debugging complex issues by providing parameter values and other details. However, this should not be enabled in 
production due to the risk of exposing sensitive information in logs.
Code Example:
var optionsBuilder = new DbContextOptionsBuilder<ApplicationDbContext>();
optionsBuilder.UseSqlServer(connectionString)
              .EnableSensitiveDataLogging();
------------------------------------------------
Explanation:
EnableDetailedErrors() helps in diagnosing EF Core issues with detailed error messages but doesn't expose sensitive data, making it more suitable for production with 
minimal risk. EnableSensitiveDataLogging() should be enabled cautiously due to potential privacy risks.
Code Example:
optionsBuilder.EnableSensitiveDataLogging();  // For detailed parameter logging
optionsBuilder.EnableDetailedErrors();        // For enhanced error messages
--------------------------------------------





































